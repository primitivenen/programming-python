Given an array of integers A, return the largest integer that only occurs once.

If no integer occurs once, return -1.

Example 1:

Input: [5,7,3,9,4,9,8,3,1]
Output: 8
Explanation: 
The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it's the answer.
Example 2:

Input: [9,9,8,8]
Output: -1
Explanation: 
There is no number that occurs only once.
 
Note:

1 <= A.length <= 2000
0 <= A[i] <= 1000


class Solution:
    def largestUniqueNumber(self, A: List[int]) -> int:
        count = collections.Counter(A)
        res = []
        for k, v in count.items():
            if v == 1:
                res.append(k)
                
        return max(res) if len(res)>0 else -1
        
class Solution:
    def largestUniqueNumber(self, A: List[int]) -> int:
        unique = set()
        dup = set()
        
        for i in A:
            if i not in unique:
                unique.add(i)
            else:
                dup.add(i)  
        
        res = unique - dup
        
        if res:
            return max(res)
        
        return -1
