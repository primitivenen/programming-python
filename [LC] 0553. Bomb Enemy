Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), return the maximum enemies you can kill using one bomb.
The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.

样例
Example1

Input:
grid =[
     "0E00",
     "E0WE",
     "0E00"
]
Output: 3
Explanation:
Placing a bomb at (1,1) kills 3 enemies
Example2

Input:
grid =[
     "0E00",
     "EEWE",
     "0E00"
]
Output: 2
Explanation:
Placing a bomb at (0,0) or (0,3) or (2,0) or (2,3) kills 2 enemies
注意事项
You can only put the bomb at an empty cell.

class Solution:
    """
    @param grid: Given a 2D grid, each cell is either 'W', 'E' or '0'
    @return: an integer, the maximum enemies you can kill using one bomb
    """
    def maxKilledEnemies(self, grid):
        # write your code here
        if grid == None or len(grid) == 0 or len(grid[0]) == 0:
            return 0
            
        m = len(grid)
        n = len(grid[0])
        
        up = [[0]*n for _ in range(m)]
        down = [[0]*n for _ in range(m)]
        left = [[0]*n for _ in range(m)]
        right = [[0]*n for _ in range(m)]
        
        res = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 'W':
                    up[i][j] = 0
                    continue
                
                up[i][j] = 1 if grid[i][j] == 'E' else 0
                
                if i > 0:
                    up[i][j] += up[i-1][j]
                    
        for i in range(m-1, -1, -1):
            for j in range(n):
                if grid[i][j] == 'W':
                    down[i][j] = 0
                    continue
                
                down[i][j] = 1 if grid[i][j] == 'E' else 0
                
                if i < m-1:
                    down[i][j] += down[i+1][j]
                    
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 'W':
                    left[i][j] = 0
                    continue
                
                left[i][j] = 1 if grid[i][j] == 'E' else 0
                
                if j > 0:
                    left[i][j] += left[i][j-1]
                    
        for i in range(m):
            for j in range(n-1, -1, -1):
                if grid[i][j] == 'W':
                    right[i][j] = 0
                    continue
                
                right[i][j] = 1 if grid[i][j] == 'E' else 0
                
                if j < n-1:
                    right[i][j] += right[i][j+1]
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '0':
                    t = up[i][j] + left[i][j] + down[i][j] + right[i][j]
                    res = max(t, res)
        return res

