There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

样例
Example 1

Input:
costs = [[14,2,11],[11,14,5],[14,3,10]]
Output: 10
Explanation:
The three house use color [1,2,1] for each house. The total cost is 10.
Example 2

Input:
costs = [[5]]
Output: 5
Explanation:
There is only one color and one house.
挑战
Could you solve it in O(nk)

注意事项
All costs are positive integers.


class Solution:
    """
    @param costs: n x k cost matrix
    @return: an integer, the minimum cost to paint all houses
    """
    def minCostII(self, costs):
        # write your code here
        n = len(costs)
        if n == 0:
            return 0
        k = len(costs[0])
        
        f = [[0]*k for _ in range(n + 1)]
        
        id1=id2=0
        
        for i in range(k):
            f[0][i] = 0
            
        for i in range(1, n+1):
            min1=min2=sys.maxsize
            for j in range(k):
                if f[i-1][j] < min1:
                    min2=min1
                    id2=id1
                    min1=f[i-1][j]
                    id1=j
                else:
                    if f[i-1][j] < min2:
                        min2=f[i-1][j]
                        id2=j
            
            for j in range(k):
                f[i][j] = costs[i-1][j]
                if j!=id1:
                    f[i][j] += min1
                else:
                    f[i][j] += min2
                    
        res=sys.maxsize
        for i in range(k):
            print(f[n][i])
            res = min(res, f[n][i])
            
        return res
        
        
