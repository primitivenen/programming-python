Given a string S with only lowercase characters.

Return the number of substrings that contains at least k distinct characters.

Example
Example 1:

Input: S = "abcabcabca", k = 4
Output: 0
Explanation: There are only three distinct characters in the string.
Example 2:

Input: S = "abcabcabcabc", k = 3
Output: 55
Explanation: Any substring whose length is not smaller than 3 contains a, b, c.
    For example, there are 10 substrings whose length are 3, "abc", "bca", "cab" ... "abc"
    There are 9 substrings whose length are 4, "abca", "bcab", "cabc" ... "cabc"
    ...
    There is 1 substring whose length is 12, "abcabcabcabc"
    So the answer is 1 + 2 + ... + 10 = 55.
Notice
10 ≤ length(S) ≤ 1,000,000
1 ≤ k ≤ 26

class Solution:
    """
    @param s: a string
    @param k: an integer
    @return: the number of substrings there are that contain at least k distinct characters
    """
    def kDistinctCharacters(self, s, k):
        # Write your code here
        from collections import defaultdict
        if len(s) == 0:
            return 0
            
        n = len(s)
        num_of_substrings = 0
        different_chars = 0
        counter = defaultdict(int)
        j = 0
        
        for i in range(n):
            while j < n and different_chars < k:
                counter[s[j]] += 1 
                if counter[s[j]] == 1:
                    different_chars += 1
                j += 1
            
            if different_chars == k:
                num_of_substrings += n-j+1
            
            counter[s[i]] -= 1
            if counter[s[i]] == 0:
                different_chars -= 1
                
        return num_of_substrings

class Solution:
    """
    @param s: a string
    @param k: an integer
    @return: the number of substrings there are that contain at least k distinct characters
    """
    def kDistinctCharacters(self, s, k):
        # Write your code here
        from collections import defaultdict
        if len(s) == 0:
            return 0
            
        n = len(s)
        num_of_substrings = 0
        
        counter = defaultdict(int)
        j = 0
        
        for i in range(n):
            while j < n and len(counter) < k:  #len(counter):number of keys in dict
                counter[s[j]] += 1 
                j += 1
            
            if len(counter) == k:
                num_of_substrings += n-j+1
            
            counter[s[i]] -= 1
            if counter[s[i]] == 0:
                del counter[s[i]]
                
        return num_of_substrings
