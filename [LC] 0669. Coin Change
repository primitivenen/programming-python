669. Coin Change
中文English
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

样例
Example1

Input: 
[1, 2, 5]
11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example2

Input: 
[2]
3
Output: -1
注意事项
You may assume that you have an infinite number of each kind of coin.
It is guaranteed that the num of money will not exceed 10000.
And the num of coins wii not exceed 500，The denomination of each coin will not exceed 100

class Solution:
    """
    @param coins: a list of integer
    @param amount: a total amount of money amount
    @return: the fewest number of coins that you need to make up
    """
    def coinChange(self, coins, amount):
        # write your code here
        m = len(coins) #number of coins
        dp = [0]*(amount+1)
        
        k = 0 #the last coin value
        for i in range(1, amount+1):
            dp[i] = sys.maxsize
            for k in range(m):
                #boundary
                if i >= coins[k] and dp[i-coins[k]]!=sys.maxsize:
                    dp[i]=min(dp[i], dp[i-coins[k]] + 1)
                    
        if dp[amount] == sys.maxsize:
            return -1
        else:
            return dp[amount]
