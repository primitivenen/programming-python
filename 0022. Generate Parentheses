Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 
Constraints:

1 <= n <= 8

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        results = []
        self.dfs(n, [], 0, results)
        return results
    
    def dfs(self, n, sequence, left_paren, results):
        if len(sequence) == 2 * n:
            results.append(''.join(sequence))
            return
        if left_paren < n:
            sequence.append("(")
            self.dfs(n, sequence, left_paren + 1, results)
            sequence.pop()
        if left_paren > len(sequence) - left_paren:
            sequence.append(")")
            self.dfs(n, sequence, left_paren, results)
            sequence.pop()
