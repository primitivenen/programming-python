After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

样例
Example1

Input:  nums = [3,6,4]
Output: 6
Example2

Input:  nums = [2,3,2,3]
Output: 6
注意事项
This is an extension of House Robber.


class Solution:
    """
    @param nums: An array of non-negative integers.
    @return: The maximum amount of money you can rob tonight
    """
    def calc(self, nums):
        n = len(nums)
        if n == 0:
            return 0
        if n == 1:
            return nums[0]
            
        old = 0
        now = nums[0]
        
        for i in range(2, n+1):
            t = max(now, old+nums[i-1])
            old = now
            now = t
        
        return now
        
    def houseRobber2(self, nums):
        # write your code here
        n = len(nums)
        if n == 0:
            return 0
        if n == 1:
            return nums[0]
        A = [0]*(n-1)
        res = -sys.maxsize-1
        for i in range(n-1):
            A[i] = nums[i]
        res = max(res, self.calc(A))
        
        for i in range(n-1):
            A[i] = nums[i+1]
        res = max(res, self.calc(A))
        
        return res
