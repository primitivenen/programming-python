Given a data stream input of non-negative integers a1, a2, ..., an, ..., summarize the numbers seen so far as a list of disjoint intervals.

For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:

[1, 1]
[1, 1], [3, 3]
[1, 1], [3, 3], [7, 7]
[1, 3], [7, 7]
[1, 3], [6, 7]
Example
Example 1:

Input：["SummaryRanges","addNum","getIntervals","addNum","getIntervals","addNum","getIntervals","addNum","getIntervals","addNum","getIntervals"],[[],[1],[],[3],[],[7],[],[2],[],[6],[]]
Output：[null,null,[[1,1]],null,[[1,1],[3,3]],null,[[1,1],[3,3],[7,7]],null,[[1,3],[7,7]],null,[[1,3],[6,7]]]
Explanation：add(1)->get([[1, 1]])->add(3)->get([[1, 1], [3, 3]])->add(7)->get([[1, 1], [3, 3], [7, 7]])->add(2)-merge(1,2,3)->get([[1, 3], [7, 7]])->add(6)->merge(6,7)->get([[1, 3], [6, 7]])
Example 2:

Input：["SummaryRanges","addNum","getIntervals","addNum","getIntervals"],[[],[4],[],[3],[]]
Output：[null,null,[4,4],null,[3,4]]
Explanation：add(4)->get([[4, 4]])->add(3)->merge(3,4)->get([[3, 4]])
Challenge
What if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?

        插入
 1       1                   [1,1]
 1 3     3                  [1,1] [3,3]
 1 3     2                   [1,3]
 连通性问题
 插入1，1是一个新的联通块
 插入3， 3是一个新的联通块
 插入2， 【1，2，3] 成为一个连通块
 目的是找到每个联通块中的最小值和最大值
 合并连通块的时间复杂度还要很低
 
 数据结构：并查集
 并查集内部用一个哈希表存放整数所对应的区间
 插入数字 x 时，将 x-1 和 x+1 和 x 合并起来
 将并查集中存放的区间排序后输出即可
 
 注：并查集中的 find(x) 方法完全不变
 
 """
Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

class Solution:
    """
    @param val: An integer.
    @return: nothing
    """
    def __init__(self):
        self.uf = UnionFind()
        
    def addNum(self, val):                       #O(1)
        self.uf.add(val)
        #和 x-1 合并
        if val - 1 in self.uf.father:
            self.uf.merge(val, val - 1)
        if val + 1 in self.uf.father:
            self.uf.merge(val, val + 1)
    """
    @return: A list of intervals.
    """
    def getIntervals(self):
        #存放区间合集
        intervals = []
        for val in self.uf.father.keys():          #O(n)
            #只有父亲为空，才是根节点
            if not self.uf.father[val]:
                intervals.append(self.uf.intervals[val])
        #返回排序后的答案
        return sorted(intervals)
        
class UnionFind:
    def __init__(self):
        self.father = {}
        #存放整数对应区间
        self.intervals = {}
        
    def add(self, x):         #O(1)
        if x in self.father:     #去重
            return
        
        self.father[x] = None 
        #如果是一个新的整数，自己构成一个区间
        self.intervals[x] = [x, x]
        
    def merge(self, x, y):
        root_x, root_y = self.find(x), self.find(y)  #并查集中的 find(x) 方法完全不变
        if root_x != root_y:
            self.father[root_x] = root_y
            
            #将两个区间合并，更新根节点的区间
            left = min(
                self.intervals[root_x][0],
                self.intervals[root_y][0]
            )
            right = max(
                self.intervals[root_x][1],
                self.intervals[root_y][1]
            )
            self.intervals[root_y] = [left, right]
 
