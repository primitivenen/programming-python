Numbers keep coming, return the median of numbers at every time a new number added.

Example
Example 1

Input: [1,2,3,4,5]
Output: [1,1,2,2,3]
Explanation:
The medium of [1] and [1,2] is 1.
The medium of [1,2,3] and [1,2,3,4] is 2.
The medium of [1,2,3,4,5] is 3.
Example 2

Input: [4,5,1,3,2,6,0]
Output: [4,4,4,3,3,3,3]
Explanation:
The medium of [4], [4,5], [4,5,1] is 4.
The medium of [4,5,1,3], [4,5,1,3,2], [4,5,1,3,2,6] and [4,5,1,3,2,6,0] is 3.
Challenge
Total run time in O(nlogn).

Clarification
What's the definition of Median?

The median is not equal to median in math.
Median is the number that in the middle of a sorted array. If there are n numbers in a sorted array A, the median is A[(n - 1) / 2]A[(n−1)/2].
For example, if A=[1,2,3], median is 2. If A=[1,19], median is 1.

插入排序：O(n^2)

每次插入后，每次最坏需要O(n)时间

插入元素堆当前中位数的影响，每次最多影响一个数
左边弹出最大值，右边弹出最小值

< (x)  中位(1) > (x)       good
  x-1        1          x    good
  x+1        1          x     左边pop 一个, middle 移到右边
  x         1           x+2    middle push 到左边，右边 pop 一个作为 middle
  
小于（大于）中位数的最大（小）值

思路整理：将数组一分为二，一部分比中位数小，一部分比中位数大，使用两个堆来找到两部分的最值，每次插入后，中位数如果改变，就从一个堆中拿出新的中位数，将旧的中位数放到另一个堆

class Solution:
    """
    @param nums: A list of integers
    @return: the median of numbers
    """
    def medianII(self, nums):
        # write your code here
        #小顶堆放大于中位数的数
        #大顶堆放小于中位数的数
        #最开始中位数是数据流中的第一个数
        import heapq
        
        max_heap, min_heap = [], []
        medians = [nums[0]]        #可以作为数，而不是数组，老师说他要修改
        
        for i in range(1, len(nums)):              # O(n）
            medians.append(medians[-1])
            #小的数放到大顶堆  # 加一个数，调整的时间是 O(logn)
            if nums[i] < medians[i]:
                heapq.heappush(max_heap, -nums[i])
            #大的数放到小顶堆
            else:
                heapq.heappush(min_heap, nums[i])
            #比较堆中数字数量，调整堆和中位数
            if len(max_heap) > len(min_heap):
                heapq.heappush(min_heap, medians[i])
                medians[i] = -heapq.heappop(max_heap)
            if len(max_heap) < len(min_heap) - 1:
                heapq.heappush(max_heap, -medians[i])
                medians[i] = heapq.heappop(min_heap)
        
        return medians
        
        O(nlogn)
        
        BST 不是 balance 的 BST， 这样的话 1-2-3-4-5 （斜着的, 1 是 root, 每个都是右节点）不能中间数一定在index 的中间
        在BST 中找数一定是 O(n)， 
        BST 中增加、删除和查找元素 O(n^2)
        
        
        
        
