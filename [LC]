Lintcode 363 接雨水
approach 1: brute force: O(n*m*n*m) n: #column, m:# row, n*m 个空白位

approach 2:
def trapRainWater(self, heights):
    # write your code here
    if not heights:
        return 0

    n = len(heights)
    water_area = 0
    for i in range(n):
        right_max = heights[i]
        for j in range(i + 1, n):
            right_max = max(right_max, heights[j])
        left_max = heights[i]
        for j in range(j):
            left_max = max(left_max, heights[j])
        water_area += min(left_max, right_max) - heights[i]

    return water_area

O(n*(n+n))

前缀优化法
Approach 3: enumeration for 循环，快速算出每一列的值
def trapRainWater(self, heights):
    # write your code here
    if not heights:
        return 0

    n = len(heights)
    left_max, right_max = [0] * n, [0] * n

    left_max[0] = heights[0]
    for i in range(1, n):
        left_max[i] = max(left_max[i - 1], heights[i])
    right_max[n - 1] = heights[n - 1]
    for i in range(n - 2, -1, -1):
        right_max[i] = max(right_max[i + 1], heights[i])

    water_area = 0
    for i in range(n):
        water_area += min(left_max[i], right_max[i]) - heights[i]

    return water_area
    
时间复杂度：O(3*n) = O(n)
空间复杂度：O(3*n) = O(n)

Follow up: 时间复杂度O(n), 空间复杂度 O(1)?

O(n) 的算法有几种？枚举、双指针、单调栈，这道题三种方法都行

Approach 4:相向双指针

双指针有同向和相向两种，这题用相向双指针，计算移动到的位置能放多少水，能够唯一确定的是两个指针中较小的位置的旁边位置盛水量。

水会被更高的墙挡住，因此水将从较低的墙流走
记录两边的墙，并找到较低的墙，与其内侧的邻居比较大小
如果内侧的邻居更高，说明这个邻居无法存水
如果内侧的邻居更低，说明这个邻居可以存水
将较低的指针向中间移动，并累加存水量

def trapRainWater(self, heights):
    # write your code here
    if not heights:
        return 0

    n = len(heights)
    water_area = 0
    left, right = 0, n - 1
    while left < right:
        if heights[left] < heights[right]:
            if heights[left] > heights[left + 1]:
                water_area += heights[left] - heights[left + 1]
                heights[left + 1] = heights[left]
            left += 1
        else:
            if heights[right] > heights[right - 1]:
                water_area += heights[right] - heights[right - 1]
                heights[right - 1] = heights[right]
            right -= 1
    return water_area

Approach 5: 单调递减栈：
横竖切换

横着看，下雨的过程是一层一层铺平的
[6,4,5,1,2,3] => [6,4^,5,1^,2^,3]  检查形成 v 字形的位置 [6,5,5,2,2,3] =》 [6,5,2,3] 看到3的时候， 3，2，5形成沟
=>[6,5,3] 单调下降

def trapRainWater(self, heights):
    # write your code here
    if not heights:
        return 0

    n = len(heights)
    water_area = 0
    stack = []

    for i in range(n):
        while stack and heights[stack[-1]] < heights[i]:
            top = stack.pop(-1)
            #如果栈空，说明所有的水都从左边流走了
            if stack:
                #左右端点不计入注水宽度
                #相当于 i - stack.peek() + 1 - 2
                width = i - stack[-1] - 1
                #注水高度为两个端点高度的较小值减去最低点的高度
                height = min(heights[stack[-1]], heights[i])
                height -= heights[top]
                water_area += width * height
        stack.append(i)

    return water_area
    
    时间复杂度 O(n)，因为进出栈只有一次
    
    





