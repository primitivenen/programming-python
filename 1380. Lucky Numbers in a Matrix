Given a m * n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column
Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 3:

Input: matrix = [[7,8],[1,2]]
Output: [7]
 
Constraints:

m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 10^5.
All elements in the matrix are distinct.

class Solution:
    def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
        m = len(matrix)
        n = len(matrix[0])
        ret = []
        for i in range(m):
            min_val = matrix[i][0]
            min_idx = (i,0) 
            for j in range(n):
                if matrix[i][j] < min_val:
                    min_val = matrix[i][j]
                    min_idx = (i,j)
            if matrix[i][min_idx[1]] == max([matrix[k][min_idx[1]] for k in range(m)]):
                ret.append(matrix[i][min_idx[1]])

        
        return ret
        
    def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
        ans = []
        for i in range(len(matrix)):
            ele = min(matrix[i])
            pos = matrix[i].index(ele)
            column = [matrix[t][pos] for t in range(len(matrix)) ]
            if ele==max(column):
                ans.append(ele)
        return ans
