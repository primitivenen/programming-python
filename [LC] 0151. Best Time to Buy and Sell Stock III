Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

样例
Example 1

Input : [4,4,6,1,1,4,2,5]
Output : 6
注意事项
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

class Solution:
    """
    @param prices: Given an integer array
    @return: Maximum profit
    """
    def maxProfit(self, prices):
        # write your code here
        n = len(prices)
        if n == 0:
            return 0
        
        f = [[0]*(5+1) for _ in range(n+1)]
        
        f[0][1] = 0
        
        for i in range(2, 6):
            f[0][i] = -sys.maxsize-1
            
        for i in range(1, n+1):
            #phase 1,3,5
            for j in range(1, 6, 2):
                f[i][j] = f[i-1][j]
                if j > 1 and i>=2 and f[i-1][j-1] != -sys.maxsize-1:
                    f[i][j] = max(f[i][j], f[i-1][j-1] + prices[i-1]-prices[i-2])
            #phase 2,4
            for j in range(2, 6, 2):
                f[i][j] = f[i-1][j-1]
                if i>=2 and f[i-1][j]!=-sys.maxsize-1:
                    f[i][j] = max(f[i][j], f[i-1][j]+prices[i-1]-prices[i-2])
        return max(f[n][1], max(f[n][3], f[n][5]))
