Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

class Solution:
    dirs = [[0, 1], [1, 0], [0, -1], [-1, 0]]

    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if len(matrix) == 0:
            return 0
        m, n = len(matrix), len(matrix[0])
        cache = [[0] * n for i in range(m)]
        ans = 0
        for i in range(m):
            for j in range(n):
                ans = max(ans, self.dfs(matrix, i, j, cache))
        return ans
    
    def dfs(self, matrix: List[List[int]], i: int, j: int, cache: List[List[int]]) -> int:
        if cache[i][j] != 0:
            return cache[i][j]
        for d in self.dirs:
            x, y = i + d[0], j + d[1]
            if(x >= 0 and x < len(matrix) and y >= 0 and y < len(matrix[0]) and matrix[x][y] > matrix[i][j]):
                cache[i][j] = max(cache[i][j], self.dfs(matrix, x, y, cache))
        
        cache[i][j] += 1
        return cache[i][j]
        
O(mn)
O(mn)
