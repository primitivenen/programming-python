Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return -1 instead.

Example
Example 1:

Input: [2,3,1,2,4,3], s = 7
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: [1, 2, 3, 4, 5], s = 100
Output: -1
Challenge
If you have figured out the O(nlog n) solution, try coding another solution of which the time complexity is O(n).

Solution 1: O(nlogn)
class Solution:
    """
    @param nums: an array of integers
    @param s: An integer
    @return: an integer representing the minimum size of subarray
    """
    def minimumSize(self, nums, s):
        # write your code here
        n = len(nums)
        minLength = float('inf')
        prefixSum = self.getPrefixSum(nums)
        for start in range(n):
            end = self.getEndOfSubarray(prefixSum, start, s)
            if prefixSum[end+1] - prefixSum[start] >= s:
                minLength = min(minLength, end-start+1)
        if minLength == float('inf'):
            return -1
        return minLength
        
    def getEndOfSubarray(self, prefixSum, start, s):
        left, right = start, len(prefixSum) - 2
        while left + 1 < right:
            mid = left + (right - left)/2
            if prefixSum[mid+1] - prefixSum[start] >= s:
                right = mid
            else:
                left = mid
        if prefixSum[left+1] - prefixSum[start] >= s:
            return left
        return right
        
    def getPrefixSum(self, nums):
        prefixSum = [0]*(len(nums) + 1)
        for i in range(1, len(nums)+1):
            prefixSum[i] = prefixSum[i-1] + nums[i-1]
        return prefixSum

Solution 2: O(n)
class Solution:
    """
    @param nums: an array of integers
    @param s: An integer
    @return: an integer representing the minimum size of subarray
    """
    def minimumSize(self, nums, s):
        # write your code here
        n = len(nums)
        minlength = float('inf')
        
        if nums is None:
            return -1
        
        j = 0
        sumOfSubarray = 0
        for i in range(n):
            while j < n and sumOfSubarray < s:
                sumOfSubarray += nums[j]
                j += 1
            if sumOfSubarray >= s:
                minlength = min(minlength, j-i)
            sumOfSubarray -= nums[i]
                
        if minlength==float('inf'):
            return -1
        return minlength
