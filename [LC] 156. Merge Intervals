Given a collection of intervals, merge all overlapping intervals.

样例
Example 1:

Input: [(1,3)]
Output: [(1,3)]
Example 2:

Input:  [(1,3),(2,6),(8,10),(15,18)]
Output: [(1,6),(8,10),(15,18)]
挑战
O(n log n) time and O(1) extra space.

"""
Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

class Solution:
    """
    @param intervals: interval list.
    @return: A new interval list.
    """
    def merge(self, intervals):
        # write your code here
        #判断interval是否为空
        #按左端点排序
        #遍历所有区间
        #    如果与上一个区间重叠，
        #        进行合并
        #    否则
        #       不进行合并
        #    记录上一个区间
        #返回答案
        
        result = []
        
        if not intervals:
            return result
        
        intervals = sorted(intervals, key = lambda x: x.start)
        #last_interval = None
        for interval in intervals:
            if len(result) == 0:
                result.append(interval)
                continue
            
            if interval.start <= result[-1].end:
                result[-1].end = max(result[-1].end, interval.end)
            else:
                result.append(interval)
                
        return result
