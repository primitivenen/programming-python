Given an array prices and the i-th element of it represents the price of a stock on the i-th day.

You may complete at most k transactions. What's the maximum profit?

样例
Example 1:

Input: k = 2, prices = [4, 4, 6, 1, 1, 4, 2 ,5]
Output: 6
Explanation: Buy at 4 and sell at 6. Then buy at 1 and sell at 5. Your profit is 2 + 4 = 6.
Example 2:

Input: k = 1, prices = [3, 2, 1]
Output: 0
Explanation: No transaction.
挑战
O(nk) time. n is the size of prices.

注意事项
You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

class Solution:
    """
    @param K: An integer
    @param prices: An integer array
    @return: Maximum profit
    """
    def maxProfit(self, k, prices):
        # write your code here
        n = len(prices)
        if n == 0:
            return 0
            
        if k > n/2:
            sum = 0
            for i in range(0, n-1):
                if prices[i+1]>prices[i]:
                    sum+=prices[i+1] - prices[i]
            return sum
        
        f = [[0]*(2*k+2) for _ in range(n+1)]
        
        f[0][1] = 0
        
        for i in range(2, 2*k+2):
            f[0][i] = -sys.maxsize-1
            
        for i in range(1, n+1):
            #phase 1,3,5
            for j in range(1, 2*k+2, 2):
                f[i][j] = f[i-1][j]
                if j > 1 and i>=2 and f[i-1][j-1] != -sys.maxsize-1:
                    f[i][j] = max(f[i][j], f[i-1][j-1] + prices[i-1]-prices[i-2])
            #phase 2,4
            for j in range(2, 2*k+1, 2):
                f[i][j] = f[i-1][j-1]
                if i>=2 and f[i-1][j]!=-sys.maxsize-1:
                    f[i][j] = max(f[i][j], f[i-1][j]+prices[i-1]-prices[i-2])
                    
        res = -sys.maxsize-1
        for i in range(1, 2*k+2):
            res = max(res, f[n][i])
            
        return res
