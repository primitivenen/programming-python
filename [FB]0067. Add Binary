Given two binary strings a and b, return their sum as a binary string.

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101" 

Constraints:
1 <= a.length, b.length <= 104
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.

class Solution:
    def addBinary(self, a: str, b: str) -> str:
        len_a = len(a)
        len_b = len(b)
        length = max(len_a, len_b)
        res = ""
        
        i = len_a - 1
        j = len_b - 1 
        
        carryover = 0
        
        while i >= 0 or j >= 0:
            if i >= 0 and j >= 0:
                tmp = int(a[i]) + int(b[j]) + carryover
            elif i >= 0:
                tmp = int(a[i]) + carryover
            else:
                tmp = int(b[j]) + carryover
            if tmp == 0 or tmp == 1:
                res += str(tmp)
                carryover = 0
            else:
                tmp -= 2
                res += str(tmp)
                carryover = 1
            i -= 1
            j -= 1
            
        if carryover == 1:
            res += '1'
        return res[::-1]
        
   class Solution(object):
    def addBinary(self, a, b):
        result = []
        carry = 0
        i = len(a)-1
        j = len(b)-1

        while i >= 0 or j >= 0 or carry:
            total = carry

            if i >= 0:
                total += int(a[i])
                i -= 1
            if j >= 0:
                total += int(b[j])
                j -= 1

            result.append(str(total % 2))
            carry = total//2

        return ''.join(reversed(result))
