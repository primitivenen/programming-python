Given a list of scores of different students, return the average score of each student's top five scores in the order of each student's id.

Each entry items[i] has items[i][0] the student's id, and items[i][1] the student's score.  The average score is calculated using integer division.

 

Example 1:

Input: [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
Output: [[1,87],[2,88]]
Explanation: 
The average of the student with id = 1 is 87.
The average of the student with id = 2 is 88.6. But with integer division their average converts to 88.
 

Note:

1 <= items.length <= 1000
items[i].length == 2
The IDs of the students is between 1 to 1000
The score of the students is between 1 to 100
For each student, there are at least 5 scores

class Solution:
    def highFive(self, items: List[List[int]]) -> List[List[int]]:
        obj = {}
        for i in items:
            if i[0] in obj:
                obj[i[0]].append(i[1])
            else:
                obj[i[0]]=[]
                obj[i[0]].append(i[1])
            obj[i[0]].sort(reverse=True)
        for key in obj:
            top5 = obj[key][:5]
            obj[key] = sum(top5)//5
        dictlist=[]
        for key, value in obj.items():
            temp = [key,value]
            dictlist.append(temp)
        return dictlist
        
    class Solution(object):
    def highFive(self, items):
        """
        :type items: List[List[int]]
        :rtype: List[List[int]]
        """
        hash_table={}
        for item in items:
            if item[0] in hash_table:
                hash_table[item[0]].append(item[1])
            else:
                hash_table[item[0]]=[item[1]]
      
        sorted_table=sorted(hash_table.items())
        new_list=[]
        for key, value in sorted_table:
             avg=sum(sorted(value,reverse=True)[:5])/5
             new_list.append([key,avg])
            
        return new_list
        
class Solution:
    def highFive(self, items: List[List[int]]) -> List[List[int]]:
        d = collections.defaultdict(list)
        
        for id, score in items:
            if len(d[id]) < 5:
                heapq.heappush(d[id], score)
            else:
                if score > d[id][0]:
                    heapq.heappop(d[id])
                    heapq.heappush(d[id], score)
        res = []
        for key, score in d.items():
            res.append([key, sum(score) // len(score)])
            
        return res
