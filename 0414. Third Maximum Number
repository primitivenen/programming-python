Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        max_1st, max_2nd, max_3rd = -sys.maxsize-1, -sys.maxsize-1,-sys.maxsize-1
        
        for n in nums:
            if n>max_1st:
                max_3rd = max_2nd
                max_2nd = max_1st
                max_1st = n
            elif n>max_2nd and n < max_1st:
                max_3rd = max_2nd
                max_2nd = n
            elif n>max_3rd and n < max_2nd:
                max_3rd = n
        
        if max_3rd == -sys.maxsize-1:
            return max_1st
        
        return max_3rd
