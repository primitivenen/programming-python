Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        result = nums[0]
        n = len(nums)
        
        for i in range(1, n):
            result ^= nums[i]
            
        return result

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        return min([k for k, v in Counter(nums).items() if v==1])
