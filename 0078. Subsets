Given an integer array nums, return all possible subsets (the power set).

The solution set must not contain duplicate subsets.

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]] 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10

思路：问所有可能子集->想到DFS，并且可以用 tree 去构思算法
 
Solution 1: 列举出 tree，第一层0个数，第二层1个数，第三层2个数。。。可以用 back tracking 回溯去拿出已经加入的点，
再放入新的点，维持同一层合计数字总量。 O(mlogn)
第一层：[]
第二层：[1][2][3]
第三层：[1,2][1,3][2,3]
第四层：[1,2,3]
每一层的节点都是上一层的节点拓展而来的

Solution 2: 另一种 tree，每一层，问要不要加入当前数字，所以树会开展出：加与不加两种可能。O(mlogn)
思路：每一层要不要放上这一层属于的这个数
第一层：[]
第二层（是否加入1）：[1],[]
第三层（是否加入2）：[1,2],[1],[2],[]
第四层（是否加入3）：[1,2,3][1,2],[1,3][1],[2,3],[2],[3],[]

class Solution:
    def helper(self, nums, cur, ans, ind):
        if ind >= len(nums):
            return
        ans.append(cur[:])
        
        for i in range(ind, len(nums)):
            if nums[i] not in cur:
                cur.append(nums[i])
                self.helper(nums, cur, ans, i)
                cur.pop()
        return
        
    def subsets(self, nums: List[int]) -> List[List[int]]:
        cur = []
        ans = []
        self.helper(nums, cur, ans, 0)
        return ans


