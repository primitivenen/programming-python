Given an integer array nums, return all possible subsets (the power set).

The solution set must not contain duplicate subsets.

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]] 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10

class Solution:
    def helper(self, nums, cur, ans, ind):
        if ind >= len(nums):
            return
        ans.append(cur[:])
        
        for i in range(ind, len(nums)):
            if nums[i] not in cur:
                cur.append(nums[i])
                self.helper(nums, cur, ans, i)
                cur.pop()
        return
        
    def subsets(self, nums: List[int]) -> List[List[int]]:
        cur = []
        ans = []
        self.helper(nums, cur, ans, 0)
        return ans


