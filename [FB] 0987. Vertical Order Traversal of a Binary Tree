Given a binary tree, return the vertical order traversal of its nodes values.

For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

Running a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

Return an list of non-empty reports in order of X coordinate.  Every report will have a list of values of nodes.

Example 1:

Input: [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation: 
Without loss of generality, we can assume the root node is at position (0, 0):
Then, the node with value 9 occurs at position (-1, -1);
The nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);
The node with value 20 occurs at position (1, -1);
The node with value 7 occurs at position (2, -2).
Example 2:

Input: [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation: 
The node with value 5 and the node with value 6 have the same position according to the given scheme.
However, in the report "[1,5,6]", the node value of 5 comes first since 5 is smaller than 6.

Note:

The tree will have between 1 and 1000 nodes.
Each node's value will be between 0 and 1000.
 
y 一定小于0， 左分支 x< 0， 右分支 x>0

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# DFS to propagate and compute the coordinates of every node
# save the coordinates and values of all nodes
# to speedup, save to a dictionary where the key is the column value

class Solution:
    
    # DFS to propagate and compute the coordinates of every node
    def dfs(self, root: TreeNode, x: int, y: int, coordinates: collections.defaultdict, col_range: List[int]):
        if not root:
            return
        coordinates[x].append([y, root.val])
        
        # compute the min and max column values
        col_range[0] = min(col_range[0], x)
        col_range[1] = max(col_range[1], x)
        
        self.dfs(root.left,  x - 1, y + 1, coordinates, col_range)
        self.dfs(root.right, x + 1, y + 1, coordinates, col_range)
        
    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return None
        
        import collections
        coordinates = defaultdict(list)
        col_range = [0, 0]
        self.dfs(root, 0, 0, coordinates, col_range)
        
        #s = sorted(coordinates, key = lambda x: (x[0], x[1], x[2]))
        #ans = [[s[0][2]]]
        #for i in range(1, len(s)):
        #    if s[i][0] == s[i-1][0]:
        #        ans[-1].append(s[i][2])
        #    else:
        #        ans.append([s[i][2]])
        ans = []
        for col in range(col_range[0], col_range[1] + 1): # visited each elemenent in the dict
            # sort based on row (top-down) and nodel value (asc), and output
            ans.append([val for row, val in sorted(coordinates[col])])

        return ans
