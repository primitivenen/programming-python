Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

样例
Example 1:
	Input:  [[1,3,1],[1,5,1],[4,2,1]]
	Output: 7
	
	Explanation:
	Path is: 1 -> 3 -> 1 -> 1 -> 1

Example 2:
	Input:  [[1,3,2]]
	Output: 6
	
	Explanation:  
	Path is: 1 -> 3 -> 2

注意事项
You can only go right or down in the path..

class Solution:
    """
    @param grid: a list of lists of integers
    @return: An integer, minimizes the sum of all numbers along its path
    """
    def minPathSum(self, grid):
        # write your code here
        m = len(grid)
        n = len(grid[0])
        f = [[0]*n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    f[i][j] = grid[i][j]
                    continue
                if i == 0:
                    f[i][j] = grid[i][j] + f[i][j-1]
                    continue
                if j == 0:
                    f[i][j] = grid[i][j] + f[i-1][j]
                    continue
                f[i][j] = grid[i][j] + min(f[i-1][j], f[i][j-1])
        return f[m-1][n-1]
