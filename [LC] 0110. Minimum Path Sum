Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

样例
Example 1:
	Input:  [[1,3,1],[1,5,1],[4,2,1]]
	Output: 7
	
	Explanation:
	Path is: 1 -> 3 -> 1 -> 1 -> 1

Example 2:
	Input:  [[1,3,2]]
	Output: 6
	
	Explanation:  
	Path is: 1 -> 3 -> 2

注意事项
You can only go right or down in the path..

class Solution:
    """
    @param grid: a list of lists of integers
    @return: An integer, minimizes the sum of all numbers along its path
    """
    def minPathSum(self, grid):
        # write your code here
        m = len(grid)
        n = len(grid[0])
        f = [[0]*n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    f[i][j] = grid[i][j]
                    continue
                if i == 0:
                    f[i][j] = grid[i][j] + f[i][j-1]
                    continue
                if j == 0:
                    f[i][j] = grid[i][j] + f[i-1][j]
                    continue
                f[i][j] = grid[i][j] + min(f[i-1][j], f[i][j-1])
        return f[m-1][n-1]

class Solution:
    """
    @param grid: a list of lists of integers
    @return: An integer, minimizes the sum of all numbers along its path
    """
    def minPathSum(self, grid):
        # write your code here
        m = len(grid)
        n = len(grid[0])
        f = [[0]*n for _ in range(2)]
        
        old, now = 0, 0
        
        for i in range(m):
            old = now
            now = 1- now
            for j in range(n):
                if i == 0 and j == 0:
                    f[now][j] = grid[i][j]
                    continue
                if i == 0:
                    f[now][j] = grid[i][j] + f[now][j-1]
                    continue
                if j == 0:
                    f[now][j] = grid[i][j] + f[old][j]
                    continue
                f[now][j] = grid[i][j] + min(f[old][j], f[now][j-1])
        return f[now][n-1]

class Solution:
    """
    @param grid: a list of lists of integers
    @return: An integer, minimizes the sum of all numbers along its path
    """
    def minPathSum(self, grid):
        # write your code here
        m = len(grid)
        n = len(grid[0])
        f = [[0]*n for _ in range(2)]
        
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    f[i%2][j] = grid[i][j]
                    continue
                if i == 0:
                    f[i%2][j] = grid[i][j] + f[i%2][j-1]
                    continue
                if j == 0:
                    f[i%2][j] = grid[i][j] + f[1-i%2][j]
                    continue
                f[i%2][j] = grid[i][j] + min(f[1-i%2][j], f[i%2][j-1])
        return f[(m-1)%2][n-1]

打印路径
class Solution:
    """
    @param grid: a list of lists of integers
    @return: An integer, minimizes the sum of all numbers along its path
    """
    def minPathSum(self, grid):
        # write your code here
        m = len(grid)
        n = len(grid[0])
        f = [[0]*n for _ in range(m)]
        pi = [[0]*n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:
                    f[i][j] = grid[i][j]
                    continue
                if i == 0:
                    f[i][j] = grid[i][j] + f[i][j-1]
                    pi[i][j] = 0
                    continue
                if j == 0:
                    f[i][j] = grid[i][j] + f[i-1][j]
                    pi[i][j] = 1
                    continue
                pi[i][j] = 0 if f[i-1][j] < f[i][j-1] else 1
                f[i][j] = grid[i][j] + min(f[i-1][j], f[i][j-1])
        
        path = [0] * (m+n-1)
        x = m - 1
        y = n - 1
        for p in range(0, m+n-1):
            path[p] = grid[x][y]
            if pi[x][y] == 0:
                x -= 1
            else:
                y -= 1
        for p in range(m+n-2, -1, -1):
            print(path[p])
        
        return f[m-1][n-1]
