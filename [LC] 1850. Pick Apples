Alice and Bob work in a beautiful orchard. There are N apple trees in the orchard. The apple trees are arranged in a row and they are numbered from 1 to N.
Alice is planning to collect all the apples from K consecutive trees and Bob is planning to collect all the apples from L consecutive trees.
They want to choose to disjoint segements (one consisting of K trees of Alice and the other consisting of L trees for Bob) so as not to disturb each other. you should return the maximum number of apples that they can collect.

Example
Example 1:
input:
A = [6, 1, 4, 6, 3, 2, 7, 4]
K = 3
L = 2
Output: 24
Explanation: beacuse Alice can choose tree 3 to 5 and collect 4 + 6 + 3 = 13 apples, and Bob can choose trees 7 to 8 and collect 7 + 4 = 11 apples.Thus, they will collect 13 + 11 = 24.
Example 2:
Input:
A = [10, 19, 15]
K = 2
L = 2
Output: -1
Explanation: beacause it is not possible for Alice and Bob to choose two disjoint intervals.
Notice
N is an integer within the range: [2, 600]
K and L are integers within the range: [1, N - 1]
each element of array A is an integer within the range: [1, 500]

class Solution:
    """
    @param A: a list of integer
    @param K: a integer
    @param L: a integer
    @return: return the maximum number of apples that they can collect.
    """
    def PickApples(self, A, K, L):
        # write your code here
        n = len(A)
        if K + L > n:
            return -1
        
        prefix_sum = A[:]
        for i in range(1, n):
            prefix_sum[i] = prefix_sum[i-1] + A[i]
            
        prefix_k = [0] * n
        prefix_l = [0] * n
        postfix_k = [0] * n
        postfix_l = [0] * n
        
        for i in range(n):
            if i == K-1:
                prefix_k[i] = self.range_sum(prefix_sum, i-K+1, i)
            if i > K-1:
                prefix_k[i] = max(prefix_k[i-1], self.range_sum(prefix_sum, i-K+1, i))
            if i == L-1:
                prefix_l[i] = self.range_sum(prefix_sum, i-L+1, i)
            if i > L-1:
                prefix_l[i] = max(prefix_l[i-1], self.range_sum(prefix_sum, i-L+1, i))
            
        for i in range(n-1, -1, -1):
            if i+K-1==n-1:
                postfix_k[i] = self.range_sum(prefix_sum, i, i+K-1)
            if i+K-1<n-1:
                postfix_k[i] = max(postfix_k[i+1], self.range_sum(prefix_sum, i, i+K-1))
            if i+L-1==n-1:
                postfix_l[i] = self.range_sum(prefix_sum, i, i+L-1)
            if i+L-1<n-1:
                postfix_l[i] = max(postfix_l[i+1], self.range_sum(prefix_sum, i, i+L-1))
        
        result = 0
        for i in range(n-1):
            result = max(result, prefix_k[i] + postfix_l[i+1])
            result = max(result, prefix_l[i] + postfix_k[i+1])
        return result
            
    def range_sum(self, prefix_sum, l, r):
        if l == 0:
            return prefix_sum[r]
        return prefix_sum[r] - prefix_sum[l-1]

class Solution:
    def PickApples(self, A, K, L):
        n = len(A)
        max_apples = float("-inf")
        for i in range(n):
            left_max_l = self.find_max(A, L, 0, i)
            right_max_k = self.find_max(A, K, i, n)
            left_max_k = self.find_max(A, K, 0, i)
            right_max_l =self.find_max(A, L, i, n)
            
            if left_max_l != -1 and right_max_k != -1:
                max_apples = max(max_apples, left_max_l + right_max_k)
               
            if left_max_k != -1 and right_max_l != -1:
                max_apples = max(max_apples, left_max_k + right_max_l)
                
        if max_apples == float("-inf"):
            return -1
        return max_apples
        
   def find_max(self, A, k, start, end):
        if k > end_start:
            return -1
        apples, max_apples = 0, 0
        for i in range(start, start + k):
            apples += A[i]
        max_apples = apples
        
        left, right = start, start + k
        while right < end:
            apples += A[right]
            apples -= A[left]
            max_apples = max(max_apples, apples)
            left += 1
            right -= 1
         return max_apples
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
