Given an integer n. Each number from 1 to n is grouped according to the sum of its digits. 

Return how many groups have the largest size.

Example 1:

Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with largest size.
Example 2:

Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.
Example 3:

Input: n = 15
Output: 6
Example 4:

Input: n = 24
Output: 5

Constraints:

1 <= n <= 10^4


class Solution:
    def countLargestGroup(self, n: int) -> int:
        obj = {}
        
        for num in range(1, n+1):
            sum_of_digits = 0
            n = num
            while n > 0:
                sum_of_digits = sum_of_digits + n % 10
                n = n/10
            if sum_of_digits in obj:
                obj[sum_of_digits] +=1
            else:
                obj[sum_of_digits] = 1

        it = obj.values()
        it = [v for v in it if v == max(it)]
        return len(it)
       
    def countLargestGroup(self, n: int) -> int:
        di = {}
        i = 1
        while i < n+1:
            if sum([int(x) for x in str(i)]) not in di:
                di[sum([int(x) for x in str(i)])] = 1
            else:
                di[sum([int(x) for x in str(i)])] += 1
            i+=1
        it = di.values()
        it = [x for x in it if x == max(it)]
        print(it)
        return len(it)
        
