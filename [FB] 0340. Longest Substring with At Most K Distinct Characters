Given a string, find the length of the longest substring T that contains at most k distinct characters.

Example 1:

Input: s = "eceba", k = 2
Output: 3
Explanation: T is "ece" which its length is 3.
Example 2:

Input: s = "aa", k = 1
Output: 2
Explanation: T is "aa" which its length is 2.

class Solution:
    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        from collections import defaultdict
        if len(s) == 0 or k == 0:
            return 0
        n = len(s)
        max_length = 1
        counter = defaultdict(int)
        
        j = 0
        for i in range(n):
            while j < n and len(counter) <= k:
                counter[s[j]] += 1
                j += 1
            if len(counter) > k:
                max_length = max(max_length, j - i - 1)
            elif j >= n:
                max_length = max(max_length, j - i)
                break
            counter[s[i]] -= 1
            if counter[s[i]] == 0:
                del counter[s[i]]
                
        return max_length
            
