A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

样例
Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as AB (1 2) or L (12).
Example 2:

Input: "10"
Output: 1
注意事项
we can't decode an empty string. So you should return 0 if the message is empty.
The length of message n \leq 100n≤100

class Solution:
    """
    @param s: a string,  encoded message
    @return: an integer, the number of ways decoding
    """
    def numDecodings(self, s):
        # write your code here
        n = len(s)
        if n == 0:
            return 0
            
        dp = [0] * (n+1)
        
        dp[0] = 1
        
        for i in range(1, n+1):
            dp[i] = 0
            if s[i-1:i] > "0" and s[i-1: i] <= "9":
                dp[i] += dp[i-1] 
            if i-2>=0 and s[i-2:i] >= "10" and s[i-2:i] <= "26":
                dp[i] += dp[i-2] 

            
        return dp[n]
