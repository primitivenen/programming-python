Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.

If there is no non-empty subarray with sum at least K, return -1.

Example
Example 1:

Input: A = [1], K = 1
Output: 1
Example 2:

Input: A = [1,2], K = 4
Output: -1

class Solution:
    """
    @param A: the array
    @param K: sum
    @return: the length
    """
    from collections import deque
    
    def shortestSubarray(self, A, K):
        # Write your code here.
        
        mono_queue = deque([(0, -1)])
        shortest = float('inf')
        prefix_sum = 0
        for end in range(len(A)):
            prefix_sum += A[end]
            
            while mono_queue and prefix_sum - mono_queue[0][0] >= K:
                min_prefix_sum, index = mono_queue.popleft()
                shortest = min(shortest, end - index)
            
            while mono_queue and mono_queue[-1][0] >= prefix_sum:
                mono_queue.pop()
                
            mono_queue.append((prefix_sum, end))
            
        if shortest == float('inf')
            return -1
        return shortest
