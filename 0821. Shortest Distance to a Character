Given a string S and a character C, return an array of integers representing the shortest distance from the character C in the string.

Example 1:

Input: S = "loveleetcode", C = 'e'
Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]
 
Note:

S string length is in [1, 10000].
C is a single character, and guaranteed to be in string S.
All letters in S and C are lowercase.

class Solution:
    def shortestToChar(self, S: str, C: str) -> List[int]:
        i = 0
        n = len(S)
        idx = S.index(C)
        idx_new = -1
        res = []
        while i < n:
            if i < idx:
                res.append(abs(i-idx))
            elif i == idx:
                res.append(0)
            elif i > idx:
                idx_new = S.find(C, i)
                if idx_new!=-1: 
                    res.append(min(abs(i-idx),abs(i-idx_new)))
                else:
                    res.append(abs(i-idx))
            if i == idx_new:
                idx = idx_new
            i += 1
        return res
        
  class Solution:
    def shortestToChar(self, S: str, C: str) -> List[int]:
        result = [0] * len(S)
        
        char_idx = -len(S)
        
        for idx in range(len(S)):
            if S[idx] == C:
                char_idx = idx
            result[idx] = idx - char_idx
            
        char_idx = 2*len(S)
        for idx in range(len(S)-1, -1, -1):
            if S[idx] == C:
                char_idx = idx
            result[idx] = min(char_idx - idx, result[idx])
        
        return result
