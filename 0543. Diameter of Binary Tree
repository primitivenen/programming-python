Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        self.diameter = 0
        def helper(node):
            if not node:
                return 0
            ld = helper(node.left)
            rd = helper(node.right)
            if ld + rd > self.diameter:
                self.diameter = ld + rd
            return 1 + max(ld, rd)
        helper(root)
        return self.diameter

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        max_diameter, max_chain = self.dfs(root)
        return max_diameter
    
    def dfs(self, root):
        if not root:
            return [0, 0]
        
        left_max_diameter, left_max_chain = self.dfs(root.left)
        right_max_diameter, right_max_chain = self.dfs(root.right)
        
        max_diameter = max(left_max_diameter, right_max_diameter, \
                          left_max_chain + right_max_chain)
        
        max_chain = max(left_max_chain, right_max_chain) + 1
        
        return [max_diameter, max_chain]
